"use client"
import { useState } from "react";
import { type Metadata } from "next";
import { Fieldset, Input, Label, Legend } from "@headlessui/react";
import { Button } from "~/components/ui/button";
import { HeaderComponent } from "~/components/common";
import Column from "~/components/templates/column";
import { exampleConfig } from "~/app/_components/Example/example.config";

// export const metadata: Metadata = {
//   title: `Examples 2 | Piquette`,
//   description: "Generated by create-t3-app",
//   icons: [{ rel: "icon", url: "/favicon.ico" }],
// };

const wizzardForm = exampleConfig.form;

export default function ExamplePage() {
  const [visibleSection, setVisibleSection] = useState(0);

  // State to track form values
  const [formData, setFormData] = useState({
    firstName: "",
    lastName: "",
    phone: "",
    description: "",
  });

  // Helper function to handle input changes
  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value,
    });
  };

  // Helper function to check if all fields in a section are filled
  const isSectionComplete = (sectionIndex: number) => {
    if (sectionIndex === 0) {
      return (
        formData.firstName.trim() !== "" &&
        formData.lastName.trim() !== "" &&
        formData.phone.trim() !== ""
      );
    } else if (sectionIndex === 1) {
      return formData.description.trim() !== "";
    }
    return true;
  };

  // Function to check if all fields in all sections are complete
  const isFormComplete = () => {
    return (
      formData.firstName.trim() !== "" &&
      formData.lastName.trim() !== "" &&
      formData.phone.trim() !== "" &&
      formData.description.trim() !== ""
    );
  };

  // Handler for "Next" button
  const handleNext = (e: React.MouseEvent) => {
    e.preventDefault();
    if (isSectionComplete(visibleSection)) {
      setVisibleSection(visibleSection + 1);
    }
  };

  // Handler for "Previous" button
  const handlePrevious = (e: React.MouseEvent) => {
    e.preventDefault();
    if (visibleSection > 0) {
      setVisibleSection(visibleSection - 1);
    }
  };

  return (
    <Column>
      <HeaderComponent
        title="Wizzard Example"
        description="An example of an AI driven wizzard interface"
      />
      <div>
        <form>
          {wizzardForm.fields.map((field, idx) => (
            <Fieldset
              key={idx}
              className={`border border-gray-200 rounded-lg p-4 space-y-4 mb-5 ${
                visibleSection === idx ? "block" : "hidden"
              }`}
            >
              <Legend>{idx}</Legend>
              <div>
                {field.map((field, idx) => (
                  <div key={idx} className="flex items-center space-x-2">
                    <Label
                      htmlFor={field.name}
                      className="block text-sm font-medium leading-6 text-gray-900"
                    >
                      {field.label}
                    </Label>
                    <Input
                      type={field.type}
                      name={field.name}
                      id={field.name}
                      value={formData[field.name as keyof typeof formData]}
                      onChange={handleChange}
                      className="block w-full rounded-md border-0 p-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-1 focus:ring-inset focus:ring-gray-600 sm:text-sm sm:leading-6"
                    />
                  </div>
                ))}
              </div>

              <div className="mt-6 pt-5 flex items-center justify-end gap-x-6 border-t border-gray-900/10">
                {/* Add Previous button if index > 0 */}
                {visibleSection > 0 && (
                  <Button
                    variant="secondary"
                    onClick={handlePrevious}
                  >
                    Previous
                  </Button>
                )}

                <Button
                  variant="default"
                  onClick={handleNext}
                  disabled={!isSectionComplete(idx)}
                >
                  Next
                </Button>
              </div>
            </Fieldset>
          ))}

          {/* Submit/Cancel buttons outside of the fieldsets */}
          <div className="mt-6 pt-5 flex items-center justify-end gap-x-6 border-t border-gray-900/10">
            {wizzardForm.buttons.map((button, idx) => (
              <Button
                key={idx}
                type={button.type}
                variant={button.variant}
                disabled={button.type === "submit" && !isFormComplete()} // Disable submit if form is incomplete
              >
                {button.label}
              </Button>
            ))}
          </div>
        </form>
      </div>
      <pre>{JSON.stringify(wizzardForm, null, 2)}</pre>
    </Column>
  );
}